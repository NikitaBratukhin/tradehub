from django.db import models
from django.contrib.auth.models import User, Group
from django.db.models.signals import post_save, m2m_changed
from django.dispatch import receiver
from django.utils.translation import gettext_lazy as _


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def create_roles():
    roles = ["Trader", "Moderator", "Admin"]
    for role in roles:
        Group.objects.get_or_create(name=role)


class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile', verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    telegram_id = models.BigIntegerField(unique=True, null=True, blank=True, verbose_name=_("Telegram ID"))
    first_name = models.CharField(max_length=100, blank=True, verbose_name=_("–ò–º—è"))
    last_name = models.CharField(max_length=100, blank=True, verbose_name=_("–§–∞–º–∏–ª–∏—è"))
    age = models.PositiveIntegerField(null=True, blank=True, verbose_name=_("–í–æ–∑—Ä–∞—Å—Ç"))
    is_private = models.BooleanField(default=False, verbose_name=_("–°–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å"))
    rating_score = models.IntegerField(default=0, verbose_name=_("–†–µ–π—Ç–∏–Ω–≥"))
    login_streak = models.IntegerField(default=0, verbose_name=_("–°–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤"))
    last_login_streak_check = models.DateField(null=True, blank=True, verbose_name=_("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤"))
    browser_notifications_enabled = models.BooleanField(default=False, verbose_name=_("Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
    subscribed_to = models.ManyToManyField(User, related_name='subscribers', blank=True, verbose_name=_("–ü–æ–¥–ø–∏—Å–∫–∏"))

    def __str__(self):
        return f'–ü—Ä–æ—Ñ–∏–ª—å @{self.user.username}'

    class Meta:
        verbose_name = _("–ü—Ä–æ—Ñ–∏–ª—å")
        verbose_name_plural = _("–ü—Ä–æ—Ñ–∏–ª–∏")


@receiver(post_save, sender=User)
def create_or_update_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–æ–ª—å "Trader" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            trader_group = Group.objects.get(name='Trader')
            instance.groups.add(trader_group)
        except Group.DoesNotExist:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            create_roles()
            trader_group = Group.objects.get(name='Trader')
            instance.groups.add(trader_group)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if hasattr(instance, 'profile'):
            instance.profile.save()


class Publication(models.Model):
    class StatusChoices(models.TextChoices):
        ACTIVE = 'ACTIVE', _('–ê–∫—Ç–∏–≤–Ω–∞')
        TARGET_HIT = 'TARGET_HIT', _('–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (TP)')
        STOP_HIT = 'STOP_HIT', _('–°—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª (SL)')
        CANCELED = 'CANCELED', _('–û—Ç–º–µ–Ω–µ–Ω–∞')

    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='publications', verbose_name=_("–ê–≤—Ç–æ—Ä"))
    description = models.TextField(verbose_name=_("–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏"))
    screenshot_id = models.CharField(max_length=255, verbose_name=_("ID —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ URL"), blank=True)
    target_1 = models.CharField(max_length=100, verbose_name=_("–¶–µ–ª—å 1"))
    target_2 = models.CharField(max_length=100, blank=True, null=True, verbose_name=_("–¶–µ–ª—å 2"))
    target_3 = models.CharField(max_length=100, blank=True, null=True, verbose_name=_("–¶–µ–ª—å 3"))
    stop_loss = models.CharField(max_length=100, verbose_name=_("–°—Ç–æ–ø-–ª–æ—Å—Å"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
    status = models.CharField(max_length=10, choices=StatusChoices.choices, default=StatusChoices.ACTIVE,
                              verbose_name=_("–°—Ç–∞—Ç—É—Å"))
    boosts = models.ManyToManyField(User, related_name='boosted_publications', blank=True, verbose_name=_("–ë—É—Å—Ç—ã"))
    views = models.PositiveIntegerField(default=0, verbose_name=_("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"))

    def boost_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Å—Ç–æ–≤"""
        return self.boosts.count()

    def is_boosted_by(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É—Å—Ç"""
        return self.boosts.filter(id=user.id).exists()

    def __str__(self):
        return f'–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç @{self.author.username} –æ—Ç {self.created_at.strftime("%d.%m.%Y")}'

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–ü—É–±–ª–∏–∫–∞—Ü–∏—è")
        verbose_name_plural = _("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏")
        permissions = [
            ("can_publish", "–ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"),
            ("can_moderate", "–ú–æ–∂–µ—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"),
        ]


class Achievement(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ"))
    description = models.TextField(verbose_name=_("–û–ø–∏—Å–∞–Ω–∏–µ"))
    icon = models.CharField(max_length=10, default="üèÜ", verbose_name=_("–ò–∫–æ–Ω–∫–∞"))
    rating_points = models.IntegerField(default=5, help_text=_("–û—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ"),
                                        verbose_name=_("–û—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"))

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = _("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
        verbose_name_plural = _("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")


class UserAchievement(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='achievements',
                             verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    achievement = models.ForeignKey(Achievement, on_delete=models.CASCADE, verbose_name=_("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"))
    awarded_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"))

    def __str__(self):
        return f'{self.user.username} - {self.achievement.name}'

    class Meta:
        unique_together = ('user', 'achievement')
        ordering = ['-awarded_at']
        verbose_name = _("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        verbose_name_plural = _("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


class Notification(models.Model):
    class NotificationTypes(models.TextChoices):
        BOOST = 'BOOST', _('–ë—É—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
        ACHIEVEMENT = 'ACHIEVEMENT', _('–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
        PUBLICATION = 'PUBLICATION', _('–ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è')
        SYSTEM = 'SYSTEM', _('–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications',
                             verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    title = models.CharField(max_length=100, verbose_name=_("–ó–∞–≥–æ–ª–æ–≤–æ–∫"))
    message = models.CharField(max_length=255, verbose_name=_("–°–æ–æ–±—â–µ–Ω–∏–µ"))
    notification_type = models.CharField(max_length=20, choices=NotificationTypes.choices,
                                         default=NotificationTypes.SYSTEM, verbose_name=_("–¢–∏–ø"))
    link = models.URLField(blank=True, null=True, verbose_name=_("–°—Å—ã–ª–∫–∞"))
    is_read = models.BooleanField(default=False, verbose_name=_("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"))

    def __str__(self):
        return f'{self.user.username}: {self.title}'

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        verbose_name_plural = _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


class EducationalMaterial(models.Model):
    class MaterialTypes(models.TextChoices):
        ARTICLE = 'ARTICLE', _('–°—Ç–∞—Ç—å—è')
        VIDEO = 'VIDEO', _('–í–∏–¥–µ–æ')
        GUIDE = 'GUIDE', _('–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ')
        TUTORIAL = 'TUTORIAL', _('–£—Ä–æ–∫')

    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='educational_materials',
                               verbose_name=_("–ê–≤—Ç–æ—Ä"))
    title = models.CharField(max_length=200, verbose_name=_("–ó–∞–≥–æ–ª–æ–≤–æ–∫"))
    content = models.TextField(help_text=_("–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
                               verbose_name=_("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"))
    material_type = models.CharField(max_length=20, choices=MaterialTypes.choices, default=MaterialTypes.ARTICLE,
                                     verbose_name=_("–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞"))
    is_featured = models.BooleanField(default=False, verbose_name=_("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π"))
    views = models.PositiveIntegerField(default=0, verbose_name=_("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–û–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª")
        verbose_name_plural = _("–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")


class MarketOverview(models.Model):
    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='market_overviews',
                               verbose_name=_("–ê–≤—Ç–æ—Ä"))
    title = models.CharField(max_length=200, verbose_name=_("–ó–∞–≥–æ–ª–æ–≤–æ–∫"))
    video_url = models.URLField(blank=True, null=True, verbose_name=_("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"))
    content = models.TextField(verbose_name=_("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"))
    is_featured = models.BooleanField(default=False, verbose_name=_("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π"))
    views = models.PositiveIntegerField(default=0, verbose_name=_("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞")
        verbose_name_plural = _("–û–±–∑–æ—Ä—ã —Ä—ã–Ω–∫–∞")


class ChatMessage(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='chat_messages', verbose_name=_("–ê–≤—Ç–æ—Ä"))
    content = models.TextField(verbose_name=_("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"))
    is_edited = models.BooleanField(default=False, verbose_name=_("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ"))
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name=_("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))

    def __str__(self):
        return f'{self.author.username}: {self.content[:50]}...'

    class Meta:
        ordering = ['timestamp']
        verbose_name = _("–°–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞")
        verbose_name_plural = _("–°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞")


class UserStatistics(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='statistics',
                                verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    total_publications = models.PositiveIntegerField(default=0, verbose_name=_("–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"))
    successful_predictions = models.PositiveIntegerField(default=0, verbose_name=_("–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"))
    total_boosts_received = models.PositiveIntegerField(default=0, verbose_name=_("–ü–æ–ª—É—á–µ–Ω–æ –±—É—Å—Ç–æ–≤"))
    total_boosts_given = models.PositiveIntegerField(default=0, verbose_name=_("–î–∞–Ω–æ –±—É—Å—Ç–æ–≤"))
    profile_views = models.PositiveIntegerField(default=0, verbose_name=_("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è"))
    last_activity = models.DateTimeField(auto_now=True, verbose_name=_("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"))

    def success_rate(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        if self.total_publications == 0:
            return 0
        return round((self.successful_predictions / self.total_publications) * 100, 1)

    def __str__(self):
        return f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.user.username}'

    class Meta:
        verbose_name = _("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        verbose_name_plural = _("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@receiver(post_save, sender=User)
def create_user_statistics(sender, instance, created, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if created:
        UserStatistics.objects.get_or_create(user=instance)


# –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@receiver(post_save, sender=Publication)
def update_publication_stats(sender, instance, created, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if created:
        stats, _ = UserStatistics.objects.get_or_create(user=instance.author)
        stats.total_publications += 1
        stats.save()


# –°–∏–≥–Ω–∞–ª ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—É—Å—Ç–∞ (m2m)
@receiver(m2m_changed, sender=Publication.boosts.through)
def publication_boosted(sender, instance, action, pk_set, **kwargs):
    """
    –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞–≤—è—Ç –±—É—Å—Ç.
    action == 'post_add' ‚Äî –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ m2m.
    """
    from django.contrib.auth import get_user_model
    from django.shortcuts import reverse
    UserModel = get_user_model()

    if action == 'post_add' and pk_set:
        # pk_set ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –±—É—Å—Ç
        for user_pk in pk_set:
            try:
                boosting_user = UserModel.objects.get(pk=user_pk)
            except UserModel.DoesNotExist:
                continue
            # –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ–º, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä —Å–∞–º —Å–µ–±—è –±—É—Å—Ç–∏—Ç
            if boosting_user == instance.author:
                continue
            Notification.objects.create(
                user=instance.author,
                title="–í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞ –±—É—Å—Ç",
                message=f"@{boosting_user.username} –ø–æ–¥–¥–µ—Ä–∂–∞–ª(–∞) –≤–∞—à—É –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                notification_type=Notification.NotificationTypes.BOOST,
                link=f"/publication/{instance.pk}/"
            )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—ã–∑–≤–∞—Ç—å –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–ª–∏ shell –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
def setup_initial_data():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ä–æ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    create_roles()

    achievements_data = [
        {"name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "description": "–°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è", "icon": "üéØ", "rating_points": 10},
        {"name": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π", "description": "–ü–æ–ª—É—á–µ–Ω–æ 10 –±—É—Å—Ç–æ–≤", "icon": "‚≠ê", "rating_points": 25},
        {"name": "–ê–∫—Ç–∏–≤–∏—Å—Ç", "description": "50 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤ —Å–∏—Å—Ç–µ–º–µ", "icon": "üî•", "rating_points": 50},
        {"name": "–≠–∫—Å–ø–µ—Ä—Ç", "description": "80% —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–º–∏–Ω. 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π)", "icon": "üíé",
         "rating_points": 100},
    ]

    for achievement_data in achievements_data:
        Achievement.objects.get_or_create(
            name=achievement_data["name"],
            defaults=achievement_data
        )
