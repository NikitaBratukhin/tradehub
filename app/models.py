# app/models.py
import json
from django.conf import settings
from django.db import models, transaction
from django.utils import timezone
from django.db.models import F, Index
from django.contrib.auth.models import User, Group
from django.db.models.signals import post_save, m2m_changed
from django.dispatch import receiver
from django.utils.translation import gettext_lazy as _


# ---------------------------------------
# –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π
# ---------------------------------------
def create_roles():
    roles = ["Trader", "Moderator", "Admin"]
    for role in roles:
        Group.objects.get_or_create(name=role)


# ---------------------------------------
# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
# ---------------------------------------
class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile', verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    telegram_id = models.BigIntegerField(unique=True, null=True, blank=True, verbose_name=_("Telegram ID"))
    first_name = models.CharField(max_length=150, blank=True, verbose_name=_("–ò–º—è"))
    last_name = models.CharField(max_length=150, blank=True, verbose_name=_("–§–∞–º–∏–ª–∏—è"))
    age = models.PositiveIntegerField(null=True, blank=True, verbose_name=_("–í–æ–∑—Ä–∞—Å—Ç"))
    is_private = models.BooleanField(default=False, verbose_name=_("–°–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å"))

    # –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_score = models.BigIntegerField(default=0, db_index=True, verbose_name=_("–†–µ–π—Ç–∏–Ω–≥"))
    season_number = models.PositiveIntegerField(default=1, db_index=True, verbose_name=_("–ù–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞"))

    # –°–µ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤
    last_login_streak_check = models.DateField(null=True, blank=True, verbose_name=_("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤"))
    login_streak = models.PositiveIntegerField(default=0, verbose_name=_("–°–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤"))

    browser_notifications_enabled = models.BooleanField(default=False, verbose_name=_("Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
    subscribed_to = models.ManyToManyField(User, related_name='subscribers', blank=True, verbose_name=_("–ü–æ–¥–ø–∏—Å–∫–∏"))

    def __str__(self):
        return f'–ü—Ä–æ—Ñ–∏–ª—å @{self.user.username}'

    @transaction.atomic
    def add_rating(self, points: int, reason: str = ''):
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ RatingChange.
        """
        self.rating_score = F('rating_score') + points
        self.save(update_fields=['rating_score'])
        RatingChange.objects.create(user=self.user, delta=points, reason=reason)
        self.refresh_from_db(fields=['rating_score'])
        return int(self.rating_score)

    @transaction.atomic
    def handle_daily_checkin(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥:
        - +1 –æ—á–∫–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ –≤—Ö–æ–¥.
        - –ï—Å–ª–∏ —Å–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ –∫—Ä–∞—Ç–Ω–∞ 7, —Ç–æ –±–æ–Ω—É—Å +5 –æ—á–∫–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏.
        """
        today = timezone.localdate()
        if self.last_login_streak_check == today:
            return {'ok': False, 'reason': 'already_checked_today', 'rating': int(self.rating_score)}

        yesterday = today - timezone.timedelta(days=1)

        if self.last_login_streak_check == yesterday:
            self.login_streak = F('login_streak') + 1
        else:
            self.login_streak = 1

        self.last_login_streak_check = today
        self.save(update_fields=['last_login_streak_check', 'login_streak'])
        self.refresh_from_db(fields=['login_streak'])

        self.add_rating(1, reason='daily_login')

        if self.login_streak > 0 and self.login_streak % 7 == 0:
            self.add_rating(5, reason=f'streak_bonus_{self.login_streak}')

        return {'ok': True, 'login_streak': int(self.login_streak), 'rating': int(self.rating_score)}

    class Meta:
        verbose_name = _("–ü—Ä–æ—Ñ–∏–ª—å")
        verbose_name_plural = _("–ü—Ä–æ—Ñ–∏–ª–∏")


# ... (–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
class Publication(models.Model):
    class StatusChoices(models.TextChoices):
        ACTIVE = 'ACTIVE', _('–ê–∫—Ç–∏–≤–Ω–∞')
        TARGET_HIT = 'TARGET_HIT', _('–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (TP)')
        STOP_HIT = 'STOP_HIT', _('–°—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª (SL)')
        CANCELED = 'CANCELED', _('–û—Ç–º–µ–Ω–µ–Ω–∞')

    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='publications', verbose_name=_("–ê–≤—Ç–æ—Ä"))
    description = models.TextField(verbose_name=_("–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏"))
    screenshot_id = models.CharField(max_length=255, verbose_name=_("ID —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ URL"), blank=True)
    target_1 = models.CharField(max_length=100, verbose_name=_("–¶–µ–ª—å 1"))
    target_2 = models.CharField(max_length=100, blank=True, null=True, verbose_name=_("–¶–µ–ª—å 2"))
    target_3 = models.CharField(max_length=100, blank=True, null=True, verbose_name=_("–¶–µ–ª—å 3"))
    stop_loss = models.CharField(max_length=100, verbose_name=_("–°—Ç–æ–ø-–ª–æ—Å—Å"))
    created_at = models.DateTimeField(auto_now_add=True, db_index=True, verbose_name=_("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
    status = models.CharField(max_length=10, choices=StatusChoices.choices, default=StatusChoices.ACTIVE,
                              verbose_name=_("–°—Ç–∞—Ç—É—Å"))
    boosts = models.ManyToManyField(User, related_name='boosted_publications', blank=True, verbose_name=_("–ë—É—Å—Ç—ã"))
    views = models.PositiveIntegerField(default=0, verbose_name=_("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"))

    def boost_count(self):
        return self.boosts.count()

    def is_boosted_by(self, user):
        return self.boosts.filter(id=user.id).exists()

    def __str__(self):
        return f'–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç @{self.author.username} –æ—Ç {self.created_at.strftime("%d.%m.%Y")}'

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–ü—É–±–ª–∏–∫–∞—Ü–∏—è")
        verbose_name_plural = _("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏")
        permissions = [("can_publish", "–ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"), ("can_moderate", "–ú–æ–∂–µ—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")]
        indexes = [Index(fields=['-created_at'])]


class Achievement(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ"))
    description = models.TextField(verbose_name=_("–û–ø–∏—Å–∞–Ω–∏–µ"))
    icon = models.CharField(max_length=10, default="üèÜ", verbose_name=_("–ò–∫–æ–Ω–∫–∞"))
    rating_points = models.IntegerField(default=5, help_text=_("–û—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ"),
                                        verbose_name=_("–û—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"))

    def __str__(self): return self.name

    class Meta:
        verbose_name = _("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
        verbose_name_plural = _("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")


class UserAchievement(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='achievements',
                             verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    achievement = models.ForeignKey(Achievement, on_delete=models.CASCADE, verbose_name=_("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"))
    awarded_at = models.DateTimeField(auto_now_add=True, db_index=True, verbose_name=_("–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"))

    def __str__(self): return f'{self.user.username} - {self.achievement.name}'

    class Meta:
        unique_together = ('user', 'achievement')
        ordering = ['-awarded_at']
        verbose_name = _("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        verbose_name_plural = _("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        indexes = [Index(fields=['-awarded_at'])]


class RatingChange(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='rating_changes',
                             verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    delta = models.IntegerField(verbose_name=_("–ò–∑–º–µ–Ω–µ–Ω–∏–µ"))
    reason = models.CharField(max_length=200, blank=True, verbose_name=_("–ü—Ä–∏—á–∏–Ω–∞"))
    created_at = models.DateTimeField(auto_now_add=True, db_index=True, verbose_name=_("–î–∞—Ç–∞"))

    def __str__(self): return f'{self.user.username}: {self.delta} ({self.reason})'

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        verbose_name_plural = _("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞")
        indexes = [Index(fields=['created_at', 'user'])]


class DailyRatingAggregate(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    date = models.DateField(db_index=True, verbose_name=_("–î–∞—Ç–∞"))
    points = models.IntegerField(default=0, verbose_name=_("–û—á–∫–∏"))

    class Meta:
        unique_together = ('user', 'date')
        verbose_name = _("–î–Ω–µ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
        verbose_name_plural = _("–î–Ω–µ–≤–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã —Ä–µ–π—Ç–∏–Ω–≥–∞")
        indexes = [Index(fields=['date', 'user'])]


class RatingSnapshot(models.Model):
    created_at = models.DateTimeField(auto_now_add=True, db_index=True, verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"))
    period = models.CharField(max_length=50, help_text='–ù–∞–ø—Ä–∏–º–µ—Ä: "week", "month", "season"', verbose_name=_("–ü–µ—Ä–∏–æ–¥"))
    top_n = models.PositiveIntegerField(default=0, verbose_name=_("–ö–æ–ª-–≤–æ –≤ —Ç–æ–ø–µ"))
    data_raw = models.TextField(default='[]', verbose_name=_("–î–∞–Ω–Ω—ã–µ (JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç)"))

    @property
    def data(self):
        try:
            return json.loads(self.data_raw) if self.data_raw else []
        except json.JSONDecodeError:
            return []

    @data.setter
    def data(self, value):
        self.data_raw = json.dumps(value, ensure_ascii=False, indent=2)

    def __str__(self):
        return f'–°–Ω–∏–º–æ–∫ {self.period} –æ—Ç {self.created_at.strftime("%d.%m.%Y")}'

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–°–Ω–∏–º–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        verbose_name_plural = _("–°–Ω–∏–º–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")


class Notification(models.Model):
    class NotificationTypes(models.TextChoices):
        BOOST = 'BOOST', _('–ë—É—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
        ACHIEVEMENT = 'ACHIEVEMENT', _('–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
        PUBLICATION = 'PUBLICATION', _('–ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è')
        SYSTEM = 'SYSTEM', _('–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
        MARKET_OVERVIEW = 'MARKET_OVERVIEW', _('–ù–æ–≤—ã–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞')  # –ù–æ–≤—ã–π —Ç–∏–ø
        FOLLOW = 'FOLLOW', _('–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')  # –ù–æ–≤—ã–π —Ç–∏–ø

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications',
                             verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    title = models.CharField(max_length=100, verbose_name=_("–ó–∞–≥–æ–ª–æ–≤–æ–∫"))
    message = models.CharField(max_length=255, verbose_name=_("–°–æ–æ–±—â–µ–Ω–∏–µ"))
    notification_type = models.CharField(max_length=20, choices=NotificationTypes.choices,
                                         default=NotificationTypes.SYSTEM, verbose_name=_("–¢–∏–ø"))
    link = models.URLField(blank=True, null=True, verbose_name=_("–°—Å—ã–ª–∫–∞"))
    is_read = models.BooleanField(default=False, verbose_name=_("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"))

    def __str__(self): return f'{self.user.username}: {self.title}'

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        verbose_name_plural = _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


class EducationalMaterial(models.Model):
    class MaterialTypes(models.TextChoices):
        ARTICLE = 'ARTICLE', _('–°—Ç–∞—Ç—å—è')
        VIDEO = 'VIDEO', _('–í–∏–¥–µ–æ')
        GUIDE = 'GUIDE', _('–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ')
        TUTORIAL = 'TUTORIAL', _('–£—Ä–æ–∫')

    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='educational_materials',
                               verbose_name=_("–ê–≤—Ç–æ—Ä"))
    title = models.CharField(max_length=200, verbose_name=_("–ó–∞–≥–æ–ª–æ–≤–æ–∫"))
    content = models.TextField(help_text=_("–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
                               verbose_name=_("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"))
    material_type = models.CharField(max_length=20, choices=MaterialTypes.choices, default=MaterialTypes.ARTICLE,
                                     verbose_name=_("–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞"))
    is_featured = models.BooleanField(default=False, verbose_name=_("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π"))
    views = models.PositiveIntegerField(default=0, verbose_name=_("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))

    def __str__(self): return self.title

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–û–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª")
        verbose_name_plural = _("–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")


class MarketOverview(models.Model):
    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='market_overviews',
                               verbose_name=_("–ê–≤—Ç–æ—Ä"))
    title = models.CharField(max_length=200, verbose_name=_("–ó–∞–≥–æ–ª–æ–≤–æ–∫"))
    video_url = models.URLField(blank=True, null=True, verbose_name=_("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"))
    content = models.TextField(verbose_name=_("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"))
    is_featured = models.BooleanField(default=False, verbose_name=_("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π"))
    views = models.PositiveIntegerField(default=0, verbose_name=_("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))

    def __str__(self): return self.title

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞")
        verbose_name_plural = _("–û–±–∑–æ—Ä—ã —Ä—ã–Ω–∫–∞")


class ChatMessage(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='chat_messages', verbose_name=_("–ê–≤—Ç–æ—Ä"))
    content = models.TextField(verbose_name=_("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"))
    is_edited = models.BooleanField(default=False, verbose_name=_("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ"))
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name=_("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))

    def __str__(self): return f'{self.author.username}: {self.content[:50]}...'

    class Meta:
        ordering = ['timestamp']
        verbose_name = _("–°–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞")
        verbose_name_plural = _("–°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞")


class UserStatistics(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='statistics',
                                verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    total_publications = models.PositiveIntegerField(default=0, verbose_name=_("–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"))
    successful_predictions = models.PositiveIntegerField(default=0, verbose_name=_("–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"))
    total_boosts_received = models.PositiveIntegerField(default=0, verbose_name=_("–ü–æ–ª—É—á–µ–Ω–æ –±—É—Å—Ç–æ–≤"))
    total_boosts_given = models.PositiveIntegerField(default=0, verbose_name=_("–î–∞–Ω–æ –±—É—Å—Ç–æ–≤"))
    profile_views = models.PositiveIntegerField(default=0, verbose_name=_("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è"))
    last_activity = models.DateTimeField(auto_now=True, verbose_name=_("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"))

    def success_rate(self):
        if self.total_publications == 0: return 0
        return round((self.successful_predictions / self.total_publications) * 100, 1)

    def __str__(self): return f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.user.username}'

    class Meta:
        verbose_name = _("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        verbose_name_plural = _("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


# ---------------------------------------
# –°–∏–≥–Ω–∞–ª—ã
# ---------------------------------------
@receiver(post_save, sender=User)
def create_or_update_user_profile_and_stats(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)
        UserStatistics.objects.create(user=instance)
        try:
            trader_group = Group.objects.get(name='Trader')
            instance.groups.add(trader_group)
        except Group.DoesNotExist:
            create_roles()
            trader_group = Group.objects.get(name='Trader')
            instance.groups.add(trader_group)
    else:
        instance.profile.save()
        instance.statistics.save()


@receiver(post_save, sender=Publication)
def update_publication_stats_on_create(sender, instance, created, **kwargs):
    if created:
        stats, _ = UserStatistics.objects.get_or_create(user=instance.author)
        stats.total_publications = F('total_publications') + 1
        stats.save()


# –ù–û–í–´–ô –°–ò–ì–ù–ê–õ: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ–±–∑–æ—Ä–µ —Ä—ã–Ω–∫–∞
@receiver(post_save, sender=MarketOverview)
def notify_on_new_market_overview(sender, instance, created, **kwargs):
    if created:
        author = instance.author
        if not author: return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∞–≤—Ç–æ—Ä–∞
        subscribers = User.objects.filter(profile__in=author.subscribers.all())

        for subscriber in subscribers:
            Notification.objects.create(
                user=subscriber,
                title="–ù–æ–≤—ã–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞",
                message=f"–≠–∫—Å–ø–µ—Ä—Ç @{author.username} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–æ–≤—ã–π –æ–±–∑–æ—Ä: '{instance.title}'",
                notification_type=Notification.NotificationTypes.MARKET_OVERVIEW,
                link=f"/market-overviews/{instance.pk}/"
            )


@receiver(m2m_changed, sender=Publication.boosts.through)
def publication_boosted_handler(sender, instance, action, pk_set, **kwargs):
    if action == 'post_add':
        author_profile = instance.author.profile
        points_to_add = 3 * len(pk_set)
        author_profile.add_rating(points_to_add, reason=f'boost_publication_{instance.pk}')

        for user_pk in pk_set:
            try:
                boosting_user = User.objects.get(pk=user_pk)
            except User.DoesNotExist:
                continue

            if boosting_user != instance.author:
                Notification.objects.create(
                    user=instance.author,
                    title="–í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞ –±—É—Å—Ç",
                    message=f"@{boosting_user.username} –ø–æ–¥–¥–µ—Ä–∂–∞–ª(–∞) –≤–∞—à—É –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                    notification_type=Notification.NotificationTypes.BOOST,
                    link=f"/publication/{instance.pk}/"
                )